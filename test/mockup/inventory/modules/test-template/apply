#!/usr/bin/env bash

FILE="/tmp/$(basename {{ .Mango.Metadata.ModuleName }})-{{.Mango.Metadata.RunID }}"
# capture ordering info
echo "{{ .Mango.Metadata.ModuleName }}" >> /tmp/mango-dependency-testing

cat > ${FILE} <<EOF
Testing templating!
Printing all variables available, via template
-------------------
Printing host variables:
{{- range $k, $v := .Mango.HostVars }}
{{ $k }}: {{ $v }}
{{- end }}
-------------------
Printing module variables:
{{- range $k, $v := .Mango.ModuleVars }}
{{ $k }}: {{ $v }}
{{- end }}
-------------------
Printing all variables (merged, where module variables override host variables):
{{- range $k, $v := .Mango.Vars }}
{{ $k }}: {{ $v }}
{{- end }}
-------------------
Printing all Mango runtime metadata:
Enrollment status: {{ .Mango.Metadata.Enrolled }}
Run ID: {{ .Mango.Metadata.RunID }}
Manager Name: {{ .Mango.Metadata.ManagerName }}
Inventory Path: {{ .Mango.Metadata.InventoryPath }}
Hostname: {{ .Mango.Metadata.Hostname }}
-------------------
Printing all OS metadata:
{{- range $k, $v := .Mango.OS.OSRelease }}
{{ $k }}: {{ $v }}
{{- end }}
-------------------
Printing all kernel metadata:
Kernel: {{ .Mango.Kernel.Kernel }}
Major: {{ .Mango.Kernel.Major }}
Minor: {{ .Mango.Kernel.Minor }}
Flavor: {{ .Mango.Kernel.Flavor }}
Full: {{ .Mango.Kernel.Full }}
-------------------
Printing all CPU metadata:
CPU Core Count: {{ len .Mango.CPU.Cores }}
-------------------
Printing all memory metadata:
Total System Memory: {{ .Mango.Memory.MemTotalBytes | humanizeIBytes }}
Free System Memory: {{ .Mango.Memory.MemFreeBytes | humanizeIBytes }}
Swap: {{ .Mango.Memory.SwapTotalBytes | humanizeIBytes }}
-------------------
Printing all storage metadata:
Disk/Blockdevice info:
{{- range $i, $d := .Mango.Storage.Disks }}
{{ $i }}:
    Name: {{ .Name }}
    Virtual: {{ .Virtual }}
    SSD: {{ .SSD }}

{{- end }}
Mount info:
{{- range $i, $m := .Mango.Storage.Mounts }}
{{ $i }}:
    Mount root: {{ .Root }}
    Mount point under root: {{ .MountPoint }}
    Filesystem type for mount: {{ .FSType }}
    Mount source: {{ .Source }}

{{- end }}
-------------------
Testing template functions:
String replacement (input 'foo foo foo', expected output 'bar foo foo'): {{ "foo foo foo" | sprig_replace "foo" "bar" }}
Contrived regex replacement (input 'a   bc   d', expected output: 'abcd'): {{ sprig_mustRegexReplaceAll "([A-Za-z]+).+([A-Za-z]+).+([A-Za-z]+)" "a   bc   d" "$1$2$3" }}
Private IP: {{ sockaddr_GetPrivateIP }}
Public IP: {{ sockaddr_GetPublicIP }}
Interfaces: {{ sockaddr_GetAllInterfaces }}
More complex sockaddr template:
{{ with $ifAddrs := sockaddr_GetAllInterfaces | sockaddr_include "type" "ipv6" | sockaddr_include "flags" "forwardable" | sockaddr_exclude "flags" "loopback" | sockaddr_sort "+address" -}}
  {{- range $ifAddrs }}
    {{ sockaddr_attr "address" . }}
  {{- end -}}
{{- end }}
Checking IPv4 Validation:
    Google DNS 8.8.8.8: {{ isIPv4 "8.8.8.8" }}
    My IP {{ sockaddr_GetPrivateIP }}: {{ sockaddr_GetPrivateIP | isIPv4 }}
    Bad IP '1.2.j': {{ isIPv4 "1.2.j" }}
{{- with $myipv6 := sockaddr_GetAllInterfaces | sockaddr_include "type" "IPv6" | sockaddr_include "flags" "global unicast" | sockaddr_attr "address" }}
Checking IPv6 Validation:
    Google DNS 2001:4860:4860::8888: {{ isIPv6 "2001:4860:4860::8888" }}
    My IP {{ $myipv6 }}: {{ $myipv6 | isIPv6 }}
    Bad IP '1.2.j': {{ isIPv6 "1.2.j" }}
{{- end }}
Done.
EOF
